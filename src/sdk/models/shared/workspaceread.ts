/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Geography } from "./geography";
import { Notification } from "./notification";
import { WebhookConfigRead } from "./webhookconfigread";
import { Expose, Type } from "class-transformer";

/**
 * Successful operation
 */
export class WorkspaceRead extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "anonymousDataCollection" })
    anonymousDataCollection?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "customerId" })
    customerId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "defaultGeography" })
    defaultGeography?: Geography;

    @SpeakeasyMetadata()
    @Expose({ name: "displaySetupWizard" })
    displaySetupWizard?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "feedbackDone" })
    feedbackDone?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "firstCompletedSync" })
    firstCompletedSync?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "initialSetupComplete" })
    initialSetupComplete: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "news" })
    news?: boolean;

    @SpeakeasyMetadata({ elemType: Notification })
    @Expose({ name: "notifications" })
    @Type(() => Notification)
    notifications?: Notification[];

    @SpeakeasyMetadata()
    @Expose({ name: "securityUpdates" })
    securityUpdates?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "slug" })
    slug: string;

    @SpeakeasyMetadata({ elemType: WebhookConfigRead })
    @Expose({ name: "webhookConfigs" })
    @Type(() => WebhookConfigRead)
    webhookConfigs?: WebhookConfigRead[];

    @SpeakeasyMetadata()
    @Expose({ name: "workspaceId" })
    workspaceId: string;
}
